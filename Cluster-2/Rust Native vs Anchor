Video:
https://watch.screencastify.com/v/BMooofnoW9uhMEHWut7t

-------------------------------------------------------- Script in english -------------------------------------------------------------------------
Hi Rob here. 

To see the difference between a program made with native Rust and one using Anchor, I chose to use this program...

On the left we have the program written in native Rust and on the right the program written with Anchor.

At first glance we can see that the program made in native Rust requires more lines of code as opposed to the program written with Anchor.

What this program does is simply a verification of accounts to be used in the transaction. It checks that the accounts to be used are present, as well as that they have not been initialized before verifying that the lamport balance is zero.
 

Here in the native we can see the call of modules necessary for the program to work. There are a few in the native but in this case it is only one in the program made with Anchor.

In the native here we define the entry point to the program, while in Anchor we use the macro "Program" which indicates that it is the main entry point of the program.

(native) This function "process_intruction" takes 3 arguments which are program id, accounts which would be the accounts and instruction data. The function verifies that the id of the program that is passed in the instruction, coincides with the id of the current program and this is done with the function "system_program::check_id".

Then the function verifies that the number of accounts that are passed to the instruction, are at least 4.

Then it extracts the accounts from the collection using the function "next_account_info" and verifies that none of the accounts have been initialized by verifying that the lamport balance is zero.

Finally check that the id associated to "account_to_change" and "system_program" are correct.

If all the checks are correct, the function will return OK. On the other hand if it is not OK, the function will return an error code indicating the failure. 

Now in the program made with Anchor the instructions are simplified since the framework takes care of many processes behind the scenes.

In this program the function "check_accounts" is in charge of checking the same as in the native program. Check the accounts in the struct collection.


It becomes much easier to make a contract using Anchor because it simplifies the process by providing tools and libraries for development.
